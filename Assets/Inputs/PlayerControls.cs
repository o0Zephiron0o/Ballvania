//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""MainCharacter"",
            ""id"": ""45fde52e-e805-4c47-ae2c-987e917623b2"",
            ""actions"": [
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""f5711c9f-0865-4fdd-81b2-a36d33decd26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""07fdea0d-3563-4fb2-9572-36a15b0034c1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ClassNotes"",
            ""id"": ""577b2cae-e56a-46b6-ae04-36a32d773509"",
            ""actions"": [
                {
                    ""name"": ""Moves"",
                    ""type"": ""Value"",
                    ""id"": ""4b1c3a86-2b0b-40d9-9684-0bf450e04388"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""4c1bf513-94f2-40d1-a237-9cee3b9603ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""291ebcb3-4405-4159-98c5-ad06d0116dc3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moves"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8adb3a5e-05ab-4cb8-a413-637e6a877b87"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moves"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""155adc4d-984d-477b-8dff-963ff972988c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moves"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dad26444-3ae1-4de6-9a7e-6b6bc5a1273f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moves"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""548f99c6-a843-4b5c-abee-15e1dfdf712d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moves"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ddd320d5-6cd7-4616-8aea-be85ebc1b832"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moves"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74ed73e8-4269-4aa1-a54e-b78629552e14"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Moves"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e444cd3-eb73-49f7-9e40-851179912c9f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e13aced1-662e-4bb2-b8b1-928e665532a0"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MouseKeyboard"",
            ""bindingGroup"": ""MouseKeyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""GamePad"",
            ""bindingGroup"": ""GamePad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MainCharacter
        m_MainCharacter = asset.FindActionMap("MainCharacter", throwIfNotFound: true);
        m_MainCharacter_Dash = m_MainCharacter.FindAction("Dash", throwIfNotFound: true);
        // ClassNotes
        m_ClassNotes = asset.FindActionMap("ClassNotes", throwIfNotFound: true);
        m_ClassNotes_Moves = m_ClassNotes.FindAction("Moves", throwIfNotFound: true);
        m_ClassNotes_Shoot = m_ClassNotes.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainCharacter
    private readonly InputActionMap m_MainCharacter;
    private IMainCharacterActions m_MainCharacterActionsCallbackInterface;
    private readonly InputAction m_MainCharacter_Dash;
    public struct MainCharacterActions
    {
        private @PlayerControls m_Wrapper;
        public MainCharacterActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Dash => m_Wrapper.m_MainCharacter_Dash;
        public InputActionMap Get() { return m_Wrapper.m_MainCharacter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainCharacterActions set) { return set.Get(); }
        public void SetCallbacks(IMainCharacterActions instance)
        {
            if (m_Wrapper.m_MainCharacterActionsCallbackInterface != null)
            {
                @Dash.started -= m_Wrapper.m_MainCharacterActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_MainCharacterActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_MainCharacterActionsCallbackInterface.OnDash;
            }
            m_Wrapper.m_MainCharacterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
            }
        }
    }
    public MainCharacterActions @MainCharacter => new MainCharacterActions(this);

    // ClassNotes
    private readonly InputActionMap m_ClassNotes;
    private IClassNotesActions m_ClassNotesActionsCallbackInterface;
    private readonly InputAction m_ClassNotes_Moves;
    private readonly InputAction m_ClassNotes_Shoot;
    public struct ClassNotesActions
    {
        private @PlayerControls m_Wrapper;
        public ClassNotesActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Moves => m_Wrapper.m_ClassNotes_Moves;
        public InputAction @Shoot => m_Wrapper.m_ClassNotes_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_ClassNotes; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ClassNotesActions set) { return set.Get(); }
        public void SetCallbacks(IClassNotesActions instance)
        {
            if (m_Wrapper.m_ClassNotesActionsCallbackInterface != null)
            {
                @Moves.started -= m_Wrapper.m_ClassNotesActionsCallbackInterface.OnMoves;
                @Moves.performed -= m_Wrapper.m_ClassNotesActionsCallbackInterface.OnMoves;
                @Moves.canceled -= m_Wrapper.m_ClassNotesActionsCallbackInterface.OnMoves;
                @Shoot.started -= m_Wrapper.m_ClassNotesActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_ClassNotesActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_ClassNotesActionsCallbackInterface.OnShoot;
            }
            m_Wrapper.m_ClassNotesActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Moves.started += instance.OnMoves;
                @Moves.performed += instance.OnMoves;
                @Moves.canceled += instance.OnMoves;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
            }
        }
    }
    public ClassNotesActions @ClassNotes => new ClassNotesActions(this);
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("MouseKeyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    private int m_GamePadSchemeIndex = -1;
    public InputControlScheme GamePadScheme
    {
        get
        {
            if (m_GamePadSchemeIndex == -1) m_GamePadSchemeIndex = asset.FindControlSchemeIndex("GamePad");
            return asset.controlSchemes[m_GamePadSchemeIndex];
        }
    }
    public interface IMainCharacterActions
    {
        void OnDash(InputAction.CallbackContext context);
    }
    public interface IClassNotesActions
    {
        void OnMoves(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
